name: "Publish libraries"

on: pull_request
#on:
#  push:
#    branches:
#    - main

jobs:
  publish:

    env:
      BASEDIR: ${{github.workspace}}
      JAVA_OPTS: -Xms512m -Xmx1024m
      SONATYPE_USER: ${{ secrets.SONATYPE_USER }}
      SONATYPE_PWD: ${{ secrets.SONATYPE_PWD }}
      ORG_GRADLE_PROJECT_signingKey: ${{ secrets.ORG_GRADLE_PROJECT_signingKey }}
      ORG_GRADLE_PROJECT_signingPassword: ${{ secrets.ORG_GRADLE_PROJECT_signingPassword }}

    runs-on: macos-latest

    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: "Setup"
      run: brew install grep
    - name: "Set env"
      run: |
        echo "$JAVA_HOME_8_X64/bin" >> $GITHUB_PATH
        echo "JAVA_HOME=$JAVA_HOME_8_X64" >> $GITHUB_ENV
        LATEST_PUBLISHED_VERSION=$(curl -L https://repo1.maven.org/maven2/io/arrow-kt/arrow-integrations-jackson-module/maven-metadata.xml | ggrep -oP '<latest>\K[^<]*')
        if [ "$LATEST_PUBLISHED_VERSION" == "" ]; then exit 1; fi
        RELEASE_VERSION=$(grep LATEST_VERSION $BASEDIR/gradle.properties | cut -d= -f2)
        echo "LATEST_PUBLISHED_VERSION=$LATEST_PUBLISHED_VERSION" >> $GITHUB_ENV
        echo "RELEASE_VERSION=$RELEASE_VERSION" >> $GITHUB_ENV
        echo "NEW_RELEASE_VERSION_EXISTS="$([ "$LATEST_PUBLISHED_VERSION" == "$RELEASE_VERSION" ] && echo '0' || echo '1') >> $GITHUB_ENV
    - name: "Show env"
      run: |
        echo "LATEST_PUBLISHED_VERSION: $LATEST_PUBLISHED_VERSION"
        echo "RELEASE_VERSION: $RELEASE_VERSION"
        echo "NEW_RELEASE_VERSION_EXISTS: $NEW_RELEASE_VERSION_EXISTS"
    - name: "Update version when release"
      if: env.NEW_RELEASE_VERSION_EXISTS == '1'
      run: perl -pe "s/^VERSION_NAME=.*/VERSION_NAME=$RELEASE_VERSION/g" -i $BASEDIR/gradle.properties
    #- name: "Publish"
    #  run: |
    #    ./gradlew publish
    #    echo "$(cat $BASEDIR/gradle.properties | grep VERSION_NAME | cut -d'=' -f2) deployed!"
    #- name: "Create tag"
    #  if: env.NEW_RELEASE_VERSION_EXISTS == '1'
    #  run: |
    #    git remote set-url origin https://arrow-kt:$GITHUB_TOKEN@github.com/arrow-kt/arrow-integrations.git
    #    git config --global user.email "arrow-kt@users.noreply.github.com"
    #    git config --global user.name "arrow-kt"
    #    git tag -a $RELEASE_VERSION -m "Release $RELEASE_VERSION"
    #    git push origin $RELEASE_VERSION
